name: Build and Test WasmEdge on riscv64 arch

concurrency:
  group: build-riscv64-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - 'proposal/**'
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

permissions:
  contents: read

jobs:
  # TODO: Refactor `lint` with `on.workflow_run`
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  lint:
    uses: ./.github/workflows/reusable-call-linter.yml

  build_riscv64:
    name: RISC-V64
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
      with:
        egress-policy: audit

    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      with:
        fetch-depth: 0
    - name: Ensure git safe directory
      run: |
        git config --global --add safe.directory $(pwd)
    - uses: uraimo/run-on-arch-action@9492ac2ff694c0490686968bef34c9f6b9a29d6f # v2
      name: Build WasmEdge
      with:
        base_image: riscv64/ubuntu
        githubToken: ${{ github.token }}
        dockerRunArgs: |
          --volume "${PWD}:/workplace"
        shell: /bin/sh
        install: |
          apt-get update -q -y
          apt-get install -q -y git cmake g++ dpkg
          apt-get install -q -y software-properties-common
          apt-get install -q -y llvm-12-dev liblld-12-dev
          apt-get install -q -y wabt # For generating wasm
        run: |
          mkdir -p build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release .. && make -j $(nproc) && make install
          wasmedge -v
          wasmedgec -v
          wasmedge compile -h
          wasmedge run -h
          cd ../examples/wasm
          wat2wasm fibonacci.wat -o fibonacci.wasm
          wasmedgec fibonacci.wasm fibonacci_aot_c.wasm
          wasmedge --reactor fibonacci_aot_c.wasm fib 30
          wasmedge run --reactor fibonacci_aot_c.wasm fib 30
          wasmedge compile fibonacci.wasm fibonacci_aot_compile.wasm
          wasmedge --reactor fibonacci_aot_compile.wasm fib 30
          wasmedge run --reactor fibonacci_aot_compile.wasm fib 30
